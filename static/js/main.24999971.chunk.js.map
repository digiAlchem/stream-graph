{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Home","useState","graphItems","setGraphItems","updateName","event","newValue","target","value","thisInput","parseInt","name","currentItems","updateValue","count","className","totalCount","forEach","graphItem","map","barWidth","style","width","index","itemKey","onChange","type","min","onClick","push","console","log","addNewItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAIe,SAASA,IAAQ,IAAD,EACOC,mBAAS,IADhB,mBACtBC,EADsB,KACVC,EADU,OAEOF,mBAAS,IAFhB,gCAGOA,mBAAS,KAHhB,mBAsCvBG,GAtCuB,UAsCV,SAACC,GAClB,IAAMC,EAAWD,EAAME,OAAOC,MACxBC,EAAYC,SAASL,EAAME,OAAOI,MAClCC,EAAeV,EAErBU,EAAaH,GAAWE,KAAOL,EAC/BH,EAAcS,KAGVC,EAAc,SAACR,GACnB,IAAMC,EAAWD,EAAME,OAAOC,MACxBC,EAAYC,SAASL,EAAME,OAAOI,MAClCC,EAAeV,EAErBU,EAAaH,GAAWK,MAAQR,EAChCH,EAAcS,IAchB,OACE,sBAAKG,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SAhEe,WACjB,IAAIC,EAAa,EAKjB,OAJAd,EAAWe,SAAQ,SAACC,GAClBF,GAAcE,EAAUJ,SAGnBZ,EAAWiB,KAAI,SAACD,GACrB,IAAME,EAAYF,EAAUJ,MAAQE,EAAc,IAAM,IACxD,OACE,sBAAKD,UAAU,aAAf,UACE,sBAAKA,UAAU,aAAf,UACGG,EAAUP,KADb,IACmB,uBAAMI,UAAU,cAAhB,cAAgCG,EAAUJ,MAA1C,UAEnB,qBAAKC,UAAU,YAAYM,MAAO,CAACC,MAAQF,GAA3C,6BAsDJ,sBAAKL,UAAU,gBAAf,UA9Ce,WACjB,OAAOb,EAAWiB,KAAI,SAACD,EAAWK,GAChC,IAAMC,EAAUD,EAChB,OACE,sBAAKR,UAAU,YAAf,UACE,uBAAOP,MAAOU,EAAUP,KAAMc,SAAU,SAACpB,GAAD,OAAWD,EAAWC,MAC9D,uBAAqBM,KAAMa,EAASE,KAAK,SAASC,IAAI,IAAInB,MAAOU,EAAUJ,MAAOW,SAAU,SAACpB,GAAD,OAAWQ,EAAYR,KAAvGmB,UA0Cd,wBAAQI,QAAS,kBAlBJ,WACjB,IAAMhB,EAAeV,EACrBU,EAAaiB,KAAK,CAChBlB,KAAM,GACNG,MAAO,IAGTX,EAAcS,GACdkB,QAAQC,IAAI7B,GAUe8B,IAAvB,gCC9ER,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.24999971.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Home function that is reflected across the site\nexport default function Home() {\n  const [graphItems, setGraphItems] = useState([]);\n  const [graphXAxis, setGraphXAxis] = useState(\"\");\n  const [graphYAxis, setGraphYAxis] = useState(\"\");\n\n  const renderBars = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      totalCount += graphItem.count;\n    });\n\n    return graphItems.map((graphItem) => {\n      const barWidth = (graphItem.count / totalCount) * 100 + \"%\";\n      return (\n        <div className=\"graph-item\">\n          <div className=\"graph-info\">\n            {graphItem.name} <span className=\"graph-count\">({graphItem.count})</span>\n          </div>\n          <div className=\"graph-bar\" style={{width : barWidth}}>\n            &emsp;\n          </div>\n        </div>\n      );\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      const itemKey = index;\n      return (\n        <div className=\"form-item\">\n          <input value={graphItem.name} onChange={(event) => updateName(event)} />\n          <input key={itemKey} name={itemKey} type=\"number\" min=\"0\" value={graphItem.count} onChange={(event) => updateValue(event)} />\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event) => {\n    const newValue = event.target.value;\n    const thisInput = parseInt(event.target.name);\n    const currentItems = graphItems;\n\n    currentItems[thisInput].name = newValue;\n    setGraphItems(currentItems);\n  };\n\n  const updateValue = (event) => {\n    const newValue = event.target.value;\n    const thisInput = parseInt(event.target.name);\n    const currentItems = graphItems;\n\n    currentItems[thisInput].count = newValue;\n    setGraphItems(currentItems);\n  };\n\n  const addNewItem = () => {\n    const currentItems = graphItems;\n    currentItems.push({\n      name: \"\",\n      count: 0\n    });\n\n    setGraphItems(currentItems);\n    console.log(graphItems)\n  };\n\n  return (\n    <div className=\"chart\">\n      <div className=\"main-chart\">\n        {renderBars}\n      </div>\n      <div className=\"chart-options\">\n        {renderForm}\n        <button onClick={() => addNewItem()}>\n          Add New Item\n        </button>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}