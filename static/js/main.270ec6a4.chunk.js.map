{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","blankItems","useState","graphItems","setGraphItems","graphTitle","setGraphTitle","chromaColour","setChromaColour","showChromaColourPicker","setChromaColourPicker","barColour","setBarColour","showBarColourPicker","setBarColourPicker","textColour","setTextColour","showTextColourPicker","setTextColourPicker","showBorder","setShowBorder","updateItem","index","item","slice","Object","assign","updateName","event","newValue","target","value","inputIndexArray","id","match","currentIndex","parseInt","name","count","updateValue","newValueNumber","Number","isNaN","addOneToValue","currentCount","subOneFromValue","undefined","newCount","removeItem","currentTarget","currentItems","Array","from","splice","className","style","backgroundColor","color","borderLeftColor","borderLeftWidth","borderBottomColor","borderBottomWidth","totalCount","forEach","graphItem","map","barWidth","maxWidth","renderBars","TextField","label","variant","onChange","updateTitle","FormGroup","FormControlLabel","control","Switch","checked","inputProps","IconButton","onClick","Icon","colour","newIndex","length","inputMode","pattern","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.270ec6a4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { HexColorPicker } from \"react-colorful\";\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport TextField from '@mui/material/TextField';\nimport Switch from '@mui/material/Switch';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\ninterface IGraphItem {\n  name: string;\n  count: number;\n}\n\nexport default function Home() {\n  const blankItems: IGraphItem[] = [];\n\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphTitle, setGraphTitle] = useState(\"\");\n  const [chromaColour, setChromaColour] = useState(\"#00ff00\");\n  const [showChromaColourPicker, setChromaColourPicker] = useState(false);\n  const [barColour, setBarColour] = useState(\"#ff0000\");\n  const [showBarColourPicker, setBarColourPicker] = useState(false);\n  const [textColour, setTextColour] = useState(\"#000000\");\n  const [showTextColourPicker, setTextColourPicker] = useState(false);\n  const [showBorder, setShowBorder] = useState(false);\n\n  const updateItem = (index: number, item: IGraphItem) => {\n    if (! graphItems[index]) {\n      setGraphItems([\n        ...graphItems,\n        Object.assign({}, graphItems[index], item),\n      ]);\n    } else {\n      setGraphItems([\n        ...graphItems.slice(0, index),\n        Object.assign({}, graphItems[index], item),\n        ...graphItems.slice(index + 1)\n      ]);\n    }\n  }\n\n  const renderBars = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      if (graphItem) {\n        totalCount += graphItem.count || 0;\n      }\n    });\n\n    return graphItems.map((graphItem, index) => {\n      if (graphItem.name && graphItem.count) {\n        const barWidth = ((graphItem.count || 0) / totalCount) * 100 + \"%\";\n        return (\n          <div key={`graph-bar-${index}`} className=\"graph-item\">\n            <div className=\"graph-info\">\n              {graphItem.name ? graphItem.name : \"\"} <span className=\"graph-count\">{graphItem.count ? `(${graphItem.count})` : \"\"}</span>\n            </div>\n            <div className=\"graph-bar\" style={{maxWidth : barWidth, backgroundColor: barColour}}>\n              &emsp;\n            </div>\n          </div>\n        )\n      }\n\n      return \"\";\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div key={`graph-item-${index}`} className=\"form-item\">\n          <span className=\"graph-form-number\">{index + 1}</span>\n\n          <TextField id={`graph-item-${index}-name`} label=\"Name\" onChange={updateName} variant=\"outlined\"\n            value={graphItems[index].name} />\n          <TextField id={`graph-item-${index}-count`} inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n            label=\"Count\" onChange={updateValue} variant=\"outlined\" value={graphItems[index].count} />\n\n          <IconButton aria-label=\"Add one to count\" id={`graph-item-${index}-add`} onClick={() => addOneToValue(index)}>\n            <Icon>exposure_plus_1</Icon>\n          </IconButton>\n\n          <IconButton aria-label=\"Subtract one from count\" id={`graph-item-${index}-sub`} onClick={() => subOneFromValue(index)}>\n            <Icon>exposure_neg_1</Icon>\n          </IconButton>\n\n          <IconButton aria-label=\"Remove item\" id={`graph-item-${index}-remove`} onClick={removeItem}>\n            <Icon>delete_forever</Icon>\n          </IconButton>\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: newValue, count: graphItems[currentIndex].count});\n    }\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,) => {\n    const newValue = event.target.value;\n    const newValueNumber = parseInt(newValue);\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: graphItems[currentIndex].name, count: (Number.isNaN(newValueNumber) ? 0 : newValueNumber)});\n    }\n  };\n\n  const addOneToValue = (index: number) => {\n    const currentCount = graphItems[index].count;\n    updateItem(index, {name: graphItems[index].name, count: currentCount + 1});\n  }\n\n  const subOneFromValue = (index: number) => {\n    if (graphItems[index] && graphItems[index].count !== undefined) {\n      const currentItem = graphItems[index];\n      let newCount = currentItem.count - 1;\n\n      // Prevent less than zero\n      if (newCount < 0) {\n        newCount = 0;\n      }\n\n      updateItem(index, {name: graphItems[index].name, count: newCount});\n    }\n  }\n\n  const updateTitle = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    setGraphTitle(newValue);\n  };\n\n  const updateTextColour = (colour: string) => {\n    setTextColour(colour);\n  };\n\n  const updateBarColour = (colour: string) => {\n    setBarColour(colour);\n  };\n\n  const updateChromaColour = (colour: string) => {\n    setChromaColour(colour);\n  };\n\n  const updateTextColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextColour(event.target.value);\n  };\n\n  const updateBarColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setBarColour(event.target.value);\n  };\n\n  const updateChromaColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setChromaColour(event.target.value);\n  };\n\n  const addNewItem = () => {\n    const newIndex = graphItems.length;\n    updateItem(newIndex, { name: \"\", count: 0 });\n  };\n\n  const removeItem = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const inputId = event.currentTarget.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentItems = Array.from(graphItems);\n      const currentIndex = parseInt(inputIndexArray[0]);\n\n      if (currentItems[currentIndex]) {\n        currentItems.splice(currentIndex, 1);\n        setGraphItems(currentItems);\n      }\n    }\n  };\n\n  const removeAllItems = () => {\n    setGraphItems(blankItems);\n  };\n\n  return (\n    <div className=\"chart\">\n      <div className=\"main-chart\" style={{backgroundColor: chromaColour, color: textColour}}>\n        <div className=\"graph-title\">\n          {graphTitle}\n        </div>\n        <div className=\"graph-area\" style={{\n          borderLeftColor: textColour,\n          borderLeftWidth: (showBorder ? \"2px\" : \"0px\"),\n          borderBottomColor: textColour,\n          borderBottomWidth: (showBorder ? \"2px\" : \"0px\")\n        }}>\n          {renderBars()}\n        </div>\n      </div>\n      <div className=\"chart-options\">\n        <div className=\"title-form\">\n          <div className=\"form-group\">\n            <TextField id=\"graph-title\" label=\"Chart Title\" variant=\"outlined\" value={graphTitle} onChange={(event) => updateTitle(event)} />\n          </div>\n          <div className=\"form-group\">\n            <FormGroup>\n              <FormControlLabel\n                control={<Switch checked={showBorder} onChange={() => setShowBorder(!showBorder)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Chart axis lines\" />\n            </FormGroup>\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-colour\" label=\"Bar colour\" variant=\"outlined\" value={barColour} onChange={updateBarColourFromText} />\n            <IconButton color=\"primary\" onClick={() => setBarColourPicker(!showBarColourPicker)}><Icon>{showBarColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            { showBarColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={barColour} onChange={ updateBarColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text/axis colour\" variant=\"outlined\" value={textColour} onChange={updateTextColourFromText} />\n            <IconButton color=\"primary\" onClick={() => setTextColourPicker(!showTextColourPicker)}><Icon>{showTextColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            { showTextColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textColour} onChange={ updateTextColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Chroma key colour\" variant=\"outlined\" value={chromaColour} onChange={updateChromaColourFromText} />\n            <IconButton color=\"primary\" onClick={() => setChromaColourPicker(!showChromaColourPicker)}><Icon>{showChromaColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            { showChromaColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={chromaColour} onChange={ updateChromaColour } />\n              </div> }\n          </div>\n        </div>\n        <div className=\"items-form\">\n          <h2>\n            <span>Chart Items</span>\n            <IconButton onClick={addNewItem}><Icon>add_circle</Icon></IconButton>\n            <IconButton onClick={removeAllItems}><Icon>layers_clear</Icon></IconButton>\n          </h2>\n          {renderForm()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}