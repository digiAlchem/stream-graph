{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","forceUpdate","useState","setValue","value","useForceUpdate","graphItems","setGraphItems","graphTitle","setGraphTitle","barColour","setBarColour","updateName","event","newValue","target","currentItems","parseInt","getAttribute","updateValue","console","log","className","totalCount","forEach","graphItem","count","map","index","name","barWidth","style","maxWidth","backgroundColor","renderBars","placeholder","onChange","updateTitle","updateBarColour","data-index","type","min","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAae,SAASA,IACtB,IAEMC,EARe,WAAM,IAAD,EACAC,mBAAS,GADT,mBACZC,GADY,WAE1B,OAAO,kBAAMA,GAAS,SAAAC,GAAK,OAAIA,EAAQ,MAMnBC,GAHS,EAIOH,mBAHH,IADJ,mBAItBI,EAJsB,KAIVC,EAJU,OAKOL,mBAAS,IALhB,mBAKtBM,EALsB,KAKVC,EALU,OAMKP,mBAAS,IANd,mBAMtBQ,EANsB,KAMXC,EANW,KA8CvBC,EAAa,SAACC,GAClB,IAAMC,EAAWD,EAAME,OAAOX,MACxBY,EAAeV,EAGrBU,EAFqBC,SAASJ,EAAME,OAAOG,aAAa,gBAExD,KAAqCJ,EACrCP,EAAcS,IAGVG,EAAc,SAACN,GACnB,IAAMC,EAAWD,EAAME,OAAOX,MACxBY,EAAeV,EAGrBU,EAFqBC,SAASJ,EAAME,OAAOG,aAAa,gBAExD,MAAsCD,SAASH,GAC/CM,QAAQC,IAAIL,GACZT,EAAcS,IAoBhB,OACE,sBAAKM,UAAU,QAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,cAAf,SACGd,IA9EU,WACjB,IAAIe,EAAa,EAOjB,OANAjB,EAAWkB,SAAQ,SAACC,GACdA,IACFF,GAAcE,EAAUC,OAAS,MAI9BpB,EAAWqB,KAAI,SAACF,EAAWG,GAChC,GAAIH,EAAUI,MAAQJ,EAAUC,MAAO,CACrC,IAAMI,GAAaL,EAAUC,OAAS,GAAKH,EAAc,IAAM,IAC/D,OACE,sBAAgCD,UAAU,aAA1C,UACE,sBAAKA,UAAU,aAAf,UACGG,EAAUI,KAAOJ,EAAUI,KAAO,GADrC,IACyC,sBAAMP,UAAU,cAAhB,SAA+BG,EAAUC,MAAV,WAAsBD,EAAUC,MAAhC,KAA2C,QAEnH,qBAAKJ,UAAU,YAAYS,MAAO,CAACC,SAAWF,EAAUG,gBAAiBvB,GAAzE,sBAJF,oBAAuBkB,IAW3B,MAAO,MAyDJM,MAEH,sBAAKZ,UAAU,gBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAOlB,MAAOI,EAAY2B,YAAY,cAAcC,SAAU,SAACvB,GAAD,OA3BlD,SAACA,GACnB,IAAMC,EAAWD,EAAME,OAAOX,MAC9BK,EAAcK,GAyBiEuB,CAAYxB,MACrF,uBAAOT,MAAOM,EAAWyB,YAAY,aAAaC,SAAU,SAACvB,GAAD,OAvB5C,SAACA,GACvB,IAAMC,EAAWD,EAAME,OAAOX,MAC9BO,EAAaG,GAqBgEwB,CAAgBzB,SAzDtFP,EAAWqB,KAAI,SAACF,EAAWG,GAChC,OACE,sBAAKN,UAAU,YAAf,UACE,uBAAwCiB,aAAYX,EAAOQ,SAAUxB,EAAYuB,YAAY,aAA7F,qBAA0BP,EAA1B,UACA,uBAAyCW,aAAYX,EAAOY,KAAK,SAASC,IAAI,IAAIL,SAAUjB,EAAagB,YAAY,cAArH,qBAA0BP,EAA1B,iBAwDF,wBAAQc,QAAS,WApBrBnC,EAAc,GAAD,mBACRD,GADQ,CAEX,OAkBE,0BAGA,wBAAQoC,QAAS,kBAAMzC,KAAvB,iCC9GR,IAYe0C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8448917.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\ninterface IGraphItem {\n  name?: string;\n  count?: number;\n}\n\nconst useForceUpdate = () =>{\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nexport default function Home() {\n  const blankItems: IGraphItem[] = [];\n\n  const forceUpdate = useForceUpdate();\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphTitle, setGraphTitle] = useState(\"\");\n  const [barColour, setBarColour] = useState(\"\");\n\n  const renderBars = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      if (graphItem) {\n        totalCount += graphItem.count || 0;\n      }\n    });\n\n    return graphItems.map((graphItem, index) => {\n      if (graphItem.name && graphItem.count) {\n        const barWidth = ((graphItem.count || 0) / totalCount) * 100 + \"%\";\n        return (\n          <div key={`graph-bar-${index}`} className=\"graph-item\">\n            <div className=\"graph-info\">\n              {graphItem.name ? graphItem.name : \"\"} <span className=\"graph-count\">{graphItem.count ? `(${graphItem.count})` : \"\"}</span>\n            </div>\n            <div className=\"graph-bar\" style={{maxWidth : barWidth, backgroundColor: barColour}}>\n              &emsp;\n            </div>\n          </div>\n        )\n      }\n\n      return \"\";\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div className=\"form-item\">\n          <input key={`graph-item-${index}-name`} data-index={index} onChange={updateName} placeholder=\"Item name\" />\n          <input key={`graph-item-${index}-count`} data-index={index} type=\"number\" min=\"0\" onChange={updateValue} placeholder=\"Item value\" />\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    const currentItems = graphItems;\n    const currentIndex = parseInt(event.target.getAttribute(\"data-index\") as string);\n\n    currentItems[currentIndex][\"name\"] = newValue;\n    setGraphItems(currentItems);\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement>,) => {\n    const newValue = event.target.value;\n    const currentItems = graphItems;\n    const currentIndex = parseInt(event.target.getAttribute(\"data-index\") as string);\n\n    currentItems[currentIndex][\"count\"] = parseInt(newValue);\n    console.log(currentItems);\n    setGraphItems(currentItems);\n  };\n\n  const updateTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setGraphTitle(newValue);\n  };\n\n  const updateBarColour = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setBarColour(newValue);\n  };\n\n  const addNewItem = () => {\n    setGraphItems([\n      ...graphItems,\n      {}\n    ]);\n  };\n\n  return (\n    <div className=\"chart\">\n      <div className=\"main-chart\">\n        <div className=\"graph-title\">\n          {graphTitle}\n        </div>\n        {renderBars()}\n      </div>\n      <div className=\"chart-options\">\n        <div className=\"title-form\">\n          <input value={graphTitle} placeholder=\"Graph Title\" onChange={(event) => updateTitle(event)} />\n          <input value={barColour} placeholder=\"Bar Colour\" onChange={(event) => updateBarColour(event)} />\n        </div>\n        {renderForm()}\n        <button onClick={() => addNewItem()}>\n          Add New Item\n        </button>\n        <button onClick={() => forceUpdate()}>\n          Update Values\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}