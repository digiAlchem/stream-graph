{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","cookies","Cookies","blankItems","useState","graphItems","setGraphItems","graphTitle","setGraphTitle","chromaColour","setChromaColour","showChromaColourPicker","setChromaColourPicker","barColour","setBarColour","showBarColourPicker","setBarColourPicker","textColour","setTextColour","showTextColourPicker","setTextColourPicker","textOutlineColour","setTextOutlineColour","showTextOutlineColourPicker","setTextOutlineColourPicker","showOutline","setShowOutline","showBorder","setShowBorder","showTotalVotes","setShowTotalVotes","chartWidth","setChartWidth","showInfo","setShowInfo","allowSaving","setAllowSaving","showSaveSnackbar","setShowSaveSnackbar","showDeleteSnackbar","setShowDeleteSnackbar","useEffect","cookieData","get","chartOptions","options","items","updateItem","index","item","slice","Object","assign","getTotalVotes","totalCount","forEach","graphItem","count","getTextOutlineStyle","updateName","event","newValue","target","value","inputIndexArray","id","match","currentIndex","parseInt","name","doAutoSave","updateValue","newValueNumber","Number","isNaN","addOneToValue","currentCount","subOneFromValue","undefined","newCount","chartWidthLabel","removeItem","currentTarget","currentItems","Array","from","splice","override","saveData","set","path","className","Snackbar","open","autoHideDuration","onClose","elevation","severity","variant","Modal","aria-labelledby","aria-describedby","style","marginTop","Icon","fontSize","color","backgroundColor","width","textShadow","borderLeftColor","borderLeftWidth","borderBottomColor","borderBottomWidth","map","barWidth","maxWidth","renderBars","TextField","label","onChange","updateTitle","Tooltip","title","IconButton","onClick","FormGroup","FormControlLabel","control","Switch","checked","inputProps","Slider","aria-label","valueLabelFormat","getAriaValueText","valueLabelDisplay","labelPlacement","colour","newIndex","length","remove","inputMode","pattern","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ea5f464.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { HexColorPicker } from \"react-colorful\";\nimport Cookies from 'universal-cookie';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Modal from '@mui/material/Modal';\nimport MuiAlert from '@mui/material/Alert';\nimport Slider from '@mui/material/Slider';\nimport Snackbar from '@mui/material/Snackbar';\nimport Switch from '@mui/material/Switch';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\n\ninterface IGraphItem {\n  name: string;\n  count: number;\n}\n\nexport default function Home() {\n  const cookies = new Cookies();\n  const blankItems: IGraphItem[] = [];\n\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphTitle, setGraphTitle] = useState(\"\");\n  const [chromaColour, setChromaColour] = useState(\"#00ff00\");\n  const [showChromaColourPicker, setChromaColourPicker] = useState(false);\n  const [barColour, setBarColour] = useState(\"#ff0000\");\n  const [showBarColourPicker, setBarColourPicker] = useState(false);\n  const [textColour, setTextColour] = useState(\"#000000\");\n  const [showTextColourPicker, setTextColourPicker] = useState(false);\n  const [textOutlineColour, setTextOutlineColour] = useState(\"#ffffff\");\n  const [showTextOutlineColourPicker, setTextOutlineColourPicker] = useState(false);\n  const [showOutline, setShowOutline] = useState(false);\n  const [showBorder, setShowBorder] = useState(false);\n  const [showTotalVotes, setShowTotalVotes] = useState(false);\n  const [chartWidth, setChartWidth] = useState(90);\n  const [showInfo, setShowInfo] = useState(false);\n  const [allowSaving, setAllowSaving] = useState(false);\n  const [showSaveSnackbar, setShowSaveSnackbar] = useState(false);\n  const [showDeleteSnackbar, setShowDeleteSnackbar] = useState(false);\n\n  useEffect(() => {\n    // If we have cookie data, load that in\n    const cookieData = cookies.get(\"stream-poll-save-data\");\n\n    if (cookieData) {\n      const chartOptions = cookieData.options;\n\n      setGraphItems(cookieData.items);\n      setGraphTitle(chartOptions.graphTitle);\n      setShowBorder(chartOptions.showBorder);\n      setShowOutline(chartOptions.showOutline);\n      setShowTotalVotes(chartOptions.showTotalVotes);\n      setChartWidth(chartOptions.chartWidth);\n      setBarColour(chartOptions.barColour);\n      setTextColour(chartOptions.textColour);\n      setTextOutlineColour(chartOptions.textOutlineColour);\n      setChromaColour(chartOptions.chromaColour);\n      setAllowSaving(chartOptions.allowSaving);\n    }\n  }, []);\n\n  const updateItem = (index: number, item: IGraphItem) => {\n    if (! graphItems[index]) {\n      setGraphItems([\n        ...graphItems,\n        Object.assign({}, graphItems[index], item),\n      ]);\n    } else {\n      setGraphItems([\n        ...graphItems.slice(0, index),\n        Object.assign({}, graphItems[index], item),\n        ...graphItems.slice(index + 1)\n      ]);\n    }\n  }\n\n  const getTotalVotes = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      if (graphItem) {\n        totalCount += graphItem.count || 0;\n      }\n    });\n\n    return totalCount;\n  };\n\n  const getTextOutlineStyle = () => {\n    return `\n      -1px -1px 0 ${textOutlineColour},\n      0 -1px 0 ${textOutlineColour},\n      1px -1px 0 ${textOutlineColour},\n      1px 0 0 ${textOutlineColour},\n      1px 1px 0 ${textOutlineColour},\n      0 1px 0 ${textOutlineColour},\n      -1px 1px 0 ${textOutlineColour},\n      -1px 0 0 ${textOutlineColour}\n    `;\n  };\n\n  const renderBars = () => {\n    const totalCount = getTotalVotes();\n\n    return graphItems.map((graphItem, index) => {\n      if (graphItem.name && graphItem.count >= 0) {\n        const barWidth = ((graphItem.count || 0) / totalCount) * 100 + \"%\";\n        return (\n          <div key={`graph-bar-${index}`} className=\"graph-item\">\n            <div className=\"graph-info\" style={showOutline ? {textShadow: getTextOutlineStyle()} : {}}>\n              {graphItem.name} <span className=\"graph-count\">({graphItem.count})</span>\n            </div>\n            <div className=\"graph-bar\" style={{maxWidth : barWidth, backgroundColor: barColour}}>\n              &emsp;\n            </div>\n          </div>\n        )\n      }\n\n      return \"\";\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div key={`graph-item-${index}`} className=\"form-item\">\n          <span className=\"graph-form-number\">{index + 1}</span>\n\n          <TextField id={`graph-item-${index}-name`} label=\"Name\" onChange={updateName} variant=\"outlined\"\n            value={graphItems[index].name} />\n          <TextField id={`graph-item-${index}-count`} inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n            label=\"Count\" onChange={updateValue} variant=\"outlined\" value={graphItems[index].count} />\n\n          <Tooltip title=\"Add one to count\">\n            <IconButton aria-label=\"Add one to count\" id={`graph-item-${index}-add`} onClick={() => addOneToValue(index)}>\n              <Icon>exposure_plus_1</Icon>\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Subtract one from count\">\n            <IconButton aria-label=\"Subtract one from count\" id={`graph-item-${index}-sub`} onClick={() => subOneFromValue(index)}>\n              <Icon>exposure_neg_1</Icon>\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Remove item\">\n            <IconButton aria-label=\"Remove item\" id={`graph-item-${index}-remove`} onClick={removeItem}>\n              <Icon>delete_forever</Icon>\n            </IconButton>\n          </Tooltip>\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: newValue, count: graphItems[currentIndex].count});\n      doAutoSave();\n    }\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,) => {\n    const newValue = event.target.value;\n    const newValueNumber = parseInt(newValue);\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: graphItems[currentIndex].name, count: (Number.isNaN(newValueNumber) ? 0 : newValueNumber)});\n      doAutoSave();\n    }\n  };\n\n  const addOneToValue = (index: number) => {\n    const currentCount = graphItems[index].count;\n    updateItem(index, {name: graphItems[index].name, count: currentCount + 1});\n    doAutoSave();\n  }\n\n  const subOneFromValue = (index: number) => {\n    if (graphItems[index] && graphItems[index].count !== undefined) {\n      const currentItem = graphItems[index];\n      let newCount = currentItem.count - 1;\n\n      // Prevent less than zero\n      if (newCount < 0) {\n        newCount = 0;\n      }\n\n      updateItem(index, {name: graphItems[index].name, count: newCount});\n      doAutoSave();\n    }\n  }\n\n  const updateChartWidth = (event: Event, newValue: number | number[]) => {\n    if (typeof newValue === 'number') {\n      setChartWidth(newValue);\n      doAutoSave();\n    }\n  }\n\n  const chartWidthLabel = (value: number) => {\n    return `${value}%`;\n  }\n\n  const updateTitle = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    setGraphTitle(newValue);\n    doAutoSave();\n  };\n\n  const updateTextColour = (colour: string) => {\n    setTextColour(colour);\n    doAutoSave();\n  };\n\n  const updateTextOutlineColour = (colour: string) => {\n    setTextOutlineColour(colour);\n    doAutoSave();\n  };\n\n  const updateBarColour = (colour: string) => {\n    setBarColour(colour);\n    doAutoSave();\n  };\n\n  const updateChromaColour = (colour: string) => {\n    setChromaColour(colour);\n    doAutoSave();\n  };\n\n  const updateTextColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextColour(event.target.value);\n    doAutoSave();\n  };\n\n  const updateTextOutlineColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextOutlineColour(event.target.value);\n    doAutoSave();\n  };\n\n  const updateBarColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setBarColour(event.target.value);\n    doAutoSave();\n  };\n\n  const updateChromaColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setChromaColour(event.target.value);\n    doAutoSave();\n  };\n\n  const addNewItem = () => {\n    const newIndex = graphItems.length;\n    updateItem(newIndex, { name: \"\", count: 0 });\n\n    doAutoSave();\n  };\n\n  const removeItem = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const inputId = event.currentTarget.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentItems = Array.from(graphItems);\n      const currentIndex = parseInt(inputIndexArray[0]);\n\n      if (currentItems[currentIndex]) {\n        currentItems.splice(currentIndex, 1);\n        setGraphItems(currentItems);\n      }\n    }\n\n    doAutoSave();\n  };\n\n  const removeAllItems = () => {\n    setGraphItems(blankItems);\n    doAutoSave();\n  };\n\n  const doAutoSave = (override?: boolean) => {\n    if (allowSaving || override) {\n      const saveData = {\n        options: {\n          graphTitle,\n          showBorder,\n          showOutline,\n          showTotalVotes,\n          chartWidth,\n          barColour,\n          textColour,\n          textOutlineColour,\n          chromaColour,\n          allowSaving\n        },\n        items: graphItems\n      };\n\n      cookies.set(\"stream-poll-save-data\", saveData, { path: '/' });\n\n      if (override) {\n        setShowSaveSnackbar(true);\n      }\n    };\n  };\n\n  const removeSaveData = () => {\n    cookies.remove(\"stream-poll-save-data\");\n    setShowDeleteSnackbar(true);\n  };\n\n  return (\n    <div className=\"chart\">\n      <Snackbar\n        open={showSaveSnackbar}\n        autoHideDuration={3000}\n        onClose={() => setShowSaveSnackbar(false)}\n      >\n        <MuiAlert elevation={6} severity=\"success\" variant=\"filled\">\n          Local chart data saved\n        </MuiAlert>\n      </Snackbar>\n      <Snackbar\n        open={showDeleteSnackbar}\n        autoHideDuration={3000}\n        onClose={() => setShowDeleteSnackbar(false)}\n      >\n        <MuiAlert elevation={6} severity=\"success\" variant=\"filled\">\n          Local chart data deleted\n        </MuiAlert>\n      </Snackbar>\n      <Modal open={showInfo} aria-labelledby=\"modal-info\" aria-describedby=\"modal-modal-description\" onClose={() => setShowInfo(!showInfo)}>\n        <div className=\"modal-box\">\n          <h3 style={{marginTop: 8}}>How to add as a stream overlay</h3>\n          <ul>\n            <li>\n              Add a Window Capture of this browser window\n            </li>\n            <li>\n              Crop the capture down to the chart area\n            </li>\n            <li>\n              Use a chroma/colour key to make the chart background transparent\n            </li>\n          </ul>\n          <h3 style={{marginTop: 8}}>How to use the chart builder</h3>\n          <ul>\n            <li>\n              Click <Icon fontSize=\"small\">add_circle</Icon> to add a new item to the chart\n            </li>\n            <li>\n              Bars will only show on the chart if they have a name and a count\n            </li>\n            <li>\n              Bars will update in realtime when names and counts are changed\n            </li>\n            <li>\n              To remove an item from the chart, you can either blank out the item's name or click the <Icon fontSize=\"small\">delete_forever</Icon> next to the item\n            </li>\n            <li>\n              To clear the chart, click <Icon fontSize=\"small\">layers_clear</Icon> at the top of the items list\n            </li>\n          </ul>\n          <h3 style={{marginTop: 8}}>Using auto-save</h3>\n          <ul>\n            <li>\n              When auto-saving is enabled, updates to the chart (both values and configuration) will be periodically stored in a local cookie file.\n            </li>\n            <li>\n              You can trigger a manual save by clicking <Icon fontSize=\"small\">save</Icon> on the right-hand side of the chart items area.\n              <ul>\n                <li>\n                  It is recommended you trigger a save this way before you leave the page to prevent data loss.\n                </li>\n              </ul>\n            </li>\n            <li>\n              When you come back to this page, if the cookie with your data is still present, the chart will automatically load that data in.\n            </li>\n            <li>\n              You can delete the local data at any time by clicking <Icon fontSize=\"small\" color=\"error\">cookie</Icon> on the right-hand side of the chart items area.\n            </li>\n          </ul>\n        </div>\n      </Modal>\n      <div className=\"main-chart\" style={{backgroundColor: chromaColour, color: textColour, width: chartWidth + \"%\"}}>\n        <div className=\"graph-title-area\" style={showOutline ? {textShadow: getTextOutlineStyle()} : {}}>\n          <div className=\"graph-title\">\n            {graphTitle}\n          </div>\n          { showTotalVotes && <div className=\"graph-subtitle\">\n            {getTotalVotes()} total votes\n          </div> }\n        </div>\n        <div className=\"graph-area\" style={{\n          borderLeftColor: textColour,\n          borderLeftWidth: (showBorder ? \"2px\" : \"0px\"),\n          borderBottomColor: textColour,\n          borderBottomWidth: (showBorder ? \"2px\" : \"0px\")\n        }}>\n          {renderBars()}\n        </div>\n      </div>\n      <div className=\"chart-options\">\n        <div className=\"title-form\">\n          <div className=\"form-group\">\n            <TextField id=\"graph-title\" label=\"Chart Title\" variant=\"outlined\" value={graphTitle} onChange={(event) => updateTitle(event)} />\n            <Tooltip title=\"How to use\">\n              <IconButton color=\"primary\" onClick={() => setShowInfo(!showInfo)}><Icon>info</Icon></IconButton>\n            </Tooltip>\n          </div>\n          <div className=\"form-group\">\n            <FormGroup>\n              <FormControlLabel\n                control={<Switch checked={showBorder} onChange={() => setShowBorder(!showBorder)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Chart axis lines\" />\n              <FormControlLabel\n                control={<Switch checked={showOutline} onChange={() => setShowOutline(!showOutline)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Outline on text\" />\n              <FormControlLabel\n                control={<Switch checked={showTotalVotes} onChange={() => setShowTotalVotes(!showTotalVotes)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Total votes\" />\n              <FormControlLabel\n                className=\"slider-label\"\n                control={<Slider value={chartWidth} aria-label=\"Chart width\" valueLabelFormat={chartWidthLabel} getAriaValueText={chartWidthLabel} valueLabelDisplay=\"auto\" onChange={updateChartWidth} />}\n                label=\"Chart width\"\n                labelPlacement=\"top\" />\n            </FormGroup>\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-colour\" label=\"Bar colour\" variant=\"outlined\" value={barColour} onChange={updateBarColourFromText} />\n            <Tooltip title=\"Toggle bar colour picker\">\n              <IconButton color=\"primary\" onClick={() => setBarColourPicker(!showBarColourPicker)}><Icon>{showBarColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showBarColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={barColour} onChange={ updateBarColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text/axis colour\" variant=\"outlined\" value={textColour} onChange={updateTextColourFromText} />\n            <Tooltip title=\"Toggle text colour picker\">\n              <IconButton color=\"primary\" onClick={() => setTextColourPicker(!showTextColourPicker)}><Icon>{showTextColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showTextColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textColour} onChange={ updateTextColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text outline colour\" variant=\"outlined\" value={textOutlineColour} onChange={updateTextOutlineColourFromText} />\n            <Tooltip title=\"Toggle text outline colour picker\">\n              <IconButton color=\"primary\" onClick={() => setTextOutlineColourPicker(!showTextOutlineColourPicker)}><Icon>{showTextOutlineColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showTextOutlineColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textOutlineColour} onChange={ updateTextOutlineColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Chroma key colour\" variant=\"outlined\" value={chromaColour} onChange={updateChromaColourFromText} />\n            <Tooltip title=\"Toggle chroma key colour picker\">\n              <IconButton color=\"primary\" onClick={() => setChromaColourPicker(!showChromaColourPicker)}><Icon>{showChromaColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showChromaColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={chromaColour} onChange={ updateChromaColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <FormGroup>\n              <FormControlLabel\n                control={<Switch checked={allowSaving} onChange={() => setAllowSaving(!allowSaving)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Enable auto-save\" />\n            </FormGroup>\n          </div>\n        </div>\n        <div className=\"items-form\">\n          <h2 className=\"flex-header\">\n            <span>Chart Items</span>\n            <Tooltip title=\"Add item\">\n              <IconButton onClick={addNewItem}><Icon>add_circle</Icon></IconButton>\n            </Tooltip>\n            <Tooltip title=\"Remove all items\">\n              <IconButton onClick={removeAllItems}><Icon>layers_clear</Icon></IconButton>\n            </Tooltip>\n            <span className=\"flex-spacer\"></span>\n            <Tooltip title=\"Save chart data\">\n              <IconButton onClick={() => doAutoSave(true)}><Icon>save</Icon></IconButton>\n            </Tooltip>\n            <Tooltip title=\"Delete saved data\">\n              <IconButton onClick={removeSaveData}><Icon color=\"error\">cookie</Icon></IconButton>\n            </Tooltip>\n          </h2>\n          {renderForm()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}