{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","useState","graphItems","setGraphItems","graphXAxis","setGraphXAxis","graphYAxis","setGraphYAxis","updateName","event","index","newValue","target","value","currentItems","updateValue","parseInt","className","totalCount","forEach","graphItem","count","map","barWidth","name","style","width","renderBars","placeholder","onChange","updateXAxis","updateYAxis","data-index","type","min","onClick","push","addNewItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAQe,SAASA,IACtB,IAD6B,EAGOC,mBAFH,IADJ,mBAGtBC,EAHsB,KAGVC,EAHU,OAIOF,mBAAS,IAJhB,mBAItBG,EAJsB,KAIVC,EAJU,OAKOJ,mBAAS,IALhB,mBAKtBK,EALsB,KAKVC,EALU,KAuCvBC,EAAa,SAACC,EAA4CC,GAC9D,IAAMC,EAAWF,EAAMG,OAAOC,MACxBC,EAAeZ,EAErBY,EAAaJ,GAAb,KAA8BC,EAC9BR,EAAcW,IAGVC,EAAc,SAACN,EAA4CC,GAC/D,IAAMC,EAAWF,EAAMG,OAAOC,MACxBC,EAAeZ,EAErBY,EAAaJ,GAAb,MAA+BM,SAASL,GACxCR,EAAcW,IAwBhB,OACE,sBAAKG,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SAvEe,WACjB,IAAIC,EAAa,EAKjB,OAJAhB,EAAWiB,SAAQ,SAACC,GAClBF,GAAcE,EAAUC,SAGnBnB,EAAWoB,KAAI,SAACF,GACrB,IAAMG,EAAYH,EAAUC,MAAQH,EAAc,IAAM,IACxD,OACE,sBAAKD,UAAU,aAAf,UACE,sBAAKA,UAAU,aAAf,UACGG,EAAUI,KADb,IACmB,uBAAMP,UAAU,cAAhB,cAAgCG,EAAUC,MAA1C,UAEnB,qBAAKJ,UAAU,YAAYQ,MAAO,CAACC,MAAQH,GAA3C,0BA2DDI,KAEH,sBAAKV,UAAU,gBAAf,UACE,uBAAOJ,MAAOT,EAAYwB,YAAY,eAAeC,SAAU,SAACpB,GAAD,OA3BjD,SAACA,GACnB,IAAME,EAAWF,EAAMG,OAAOC,MAC9BR,EAAcM,GAyBgEmB,CAAYrB,MACtF,uBAAOI,MAAOP,EAAYsB,YAAY,eAAeC,SAAU,SAACpB,GAAD,OAvBjD,SAACA,GACnB,IAAME,EAAWF,EAAMG,OAAOC,MAC9BN,EAAcI,GAqBgEoB,CAAYtB,MAtDnFP,EAAWoB,KAAI,SAACF,EAAWV,GAChC,OACE,sBAAKO,UAAU,YAAf,UACE,uBAAOJ,MAAOX,EAAWQ,GAAOc,KAAuCQ,aAAYtB,EAAOmB,SAAU,SAACpB,GAAD,OAAWD,EAAWC,EAAOC,KAAjI,qBAAyDA,EAAzD,UACA,uBAAyCsB,aAAYtB,EAAOuB,KAAK,SAASC,IAAI,IAAIrB,MAAOX,EAAWQ,GAAOW,MAAOQ,SAAU,SAACpB,GAAD,OAAWM,EAAYN,EAAOC,KAA1J,qBAA0BA,EAA1B,iBAoDF,wBAAQyB,QAAS,kBApBJ,WACjB,IAAMrB,EAAeZ,EAErBY,EAAasB,KAAK,CAChBZ,KAAM,OACNH,MAAO,IAGTlB,EAAcW,GAYauB,IAAvB,gCC3FR,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7e498503.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\ninterface IGraphItem {\n  name: string;\n  count: number;\n}\n\nexport default function Home() {\n  const blankItems: IGraphItem[] = [];\n\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphXAxis, setGraphXAxis] = useState(\"\");\n  const [graphYAxis, setGraphYAxis] = useState(\"\");\n\n  const renderBars = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      totalCount += graphItem.count;\n    });\n\n    return graphItems.map((graphItem) => {\n      const barWidth = (graphItem.count / totalCount) * 100 + \"%\";\n      return (\n        <div className=\"graph-item\">\n          <div className=\"graph-info\">\n            {graphItem.name} <span className=\"graph-count\">({graphItem.count})</span>\n          </div>\n          <div className=\"graph-bar\" style={{width : barWidth}}>\n            &emsp;\n          </div>\n        </div>\n      );\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div className=\"form-item\">\n          <input value={graphItems[index].name} key={`graph-item-${index}-name`} data-index={index} onChange={(event) => updateName(event, index)} />\n          <input key={`graph-item-${index}-count`} data-index={index} type=\"number\" min=\"0\" value={graphItems[index].count} onChange={(event) => updateValue(event, index)} />\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const newValue = event.target.value;\n    const currentItems = graphItems;\n\n    currentItems[index][\"name\"] = newValue;\n    setGraphItems(currentItems);\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const newValue = event.target.value;\n    const currentItems = graphItems;\n\n    currentItems[index][\"count\"] = parseInt(newValue);\n    setGraphItems(currentItems);\n  };\n\n  const updateXAxis = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setGraphXAxis(newValue);\n  };\n\n  const updateYAxis = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setGraphYAxis(newValue);\n  };\n\n  const addNewItem = () => {\n    const currentItems = graphItems;\n\n    currentItems.push({\n      name: \"Item\",\n      count: 0\n    });\n\n    setGraphItems(currentItems);\n  };\n\n  return (\n    <div className=\"chart\">\n      <div className=\"main-chart\">\n        {renderBars()}\n      </div>\n      <div className=\"chart-options\">\n        <input value={graphXAxis} placeholder=\"X Axis Title\" onChange={(event) => updateXAxis(event)} />\n        <input value={graphYAxis} placeholder=\"Y Axis Title\" onChange={(event) => updateYAxis(event)} />\n        {renderForm()}\n        <button onClick={() => addNewItem()}>\n          Add New Item\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}