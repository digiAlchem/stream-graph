{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","useState","graphItems","setGraphItems","graphTitle","setGraphTitle","chromaColour","setChromaColour","showChromaColourPicker","setChromaColourPicker","barColour","setBarColour","showBarColourPicker","setBarColourPicker","textColour","setTextColour","showTextColourPicker","setTextColourPicker","showBorder","setShowBorder","updateItem","index","item","slice","Object","assign","updateName","event","newValue","target","value","inputIndexArray","id","match","currentIndex","parseInt","name","updateValue","newValueNumber","count","Number","isNaN","removeItem","currentTarget","currentItems","Array","from","splice","className","style","backgroundColor","color","borderLeftColor","borderLeftWidth","borderBottomColor","borderBottomWidth","totalCount","forEach","graphItem","map","barWidth","maxWidth","renderBars","TextField","label","variant","onChange","updateTitle","FormGroup","FormControlLabel","control","Switch","checked","inputProps","IconButton","onClick","Icon","colour","newIndex","length","inputMode","pattern","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ef5cb92.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { HexColorPicker } from \"react-colorful\";\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport TextField from '@mui/material/TextField';\nimport Switch from '@mui/material/Switch';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\ninterface IGraphItem {\n  name?: string;\n  count?: number;\n}\n\nexport default function Home() {\n  const blankItems: IGraphItem[] = [];\n\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphTitle, setGraphTitle] = useState(\"\");\n  const [chromaColour, setChromaColour] = useState(\"#00ff00\");\n  const [showChromaColourPicker, setChromaColourPicker] = useState(false);\n  const [barColour, setBarColour] = useState(\"#ff0000\");\n  const [showBarColourPicker, setBarColourPicker] = useState(false);\n  const [textColour, setTextColour] = useState(\"#000000\");\n  const [showTextColourPicker, setTextColourPicker] = useState(false);\n  const [showBorder, setShowBorder] = useState(false);\n\n  const updateItem = (index: number, item: IGraphItem) => {\n    if (! graphItems[index]) {\n      setGraphItems([\n        ...graphItems,\n        Object.assign({}, graphItems[index], item),\n      ]);\n    } else {\n      setGraphItems([\n        ...graphItems.slice(0, index),\n        Object.assign({}, graphItems[index], item),\n        ...graphItems.slice(index + 1)\n      ]);\n    }\n  }\n\n  const renderBars = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      if (graphItem) {\n        totalCount += graphItem.count || 0;\n      }\n    });\n\n    return graphItems.map((graphItem, index) => {\n      if (graphItem.name && graphItem.count) {\n        const barWidth = ((graphItem.count || 0) / totalCount) * 100 + \"%\";\n        return (\n          <div key={`graph-bar-${index}`} className=\"graph-item\">\n            <div className=\"graph-info\">\n              {graphItem.name ? graphItem.name : \"\"} <span className=\"graph-count\">{graphItem.count ? `(${graphItem.count})` : \"\"}</span>\n            </div>\n            <div className=\"graph-bar\" style={{maxWidth : barWidth, backgroundColor: barColour}}>\n              &emsp;\n            </div>\n          </div>\n        )\n      }\n\n      return \"\";\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div key={`graph-item-${index}`} className=\"form-item\">\n          <span className=\"graph-form-number\">{index + 1}</span>\n\n          <TextField id={`graph-item-${index}-name`} label=\"Name\" onChange={updateName} variant=\"outlined\"\n            value={graphItems[index].name} />\n          <TextField id={`graph-item-${index}-count`} inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n            label=\"Count\" onChange={updateValue} variant=\"outlined\" value={graphItems[index].count} />\n\n          <IconButton aria-label=\"Remove item\" id={`graph-item-${index}-remove`} onClick={removeItem}>\n            <Icon>delete_forever</Icon>\n          </IconButton>\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: newValue});\n    }\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,) => {\n    const newValue = event.target.value;\n    const newValueNumber = parseInt(newValue);\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {count: (Number.isNaN(newValueNumber) ? 0 : newValueNumber)});\n    }\n  };\n\n  const updateTitle = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    setGraphTitle(newValue);\n  };\n\n  const updateTextColour = (colour: string) => {\n    setTextColour(colour);\n  };\n\n  const updateBarColour = (colour: string) => {\n    setBarColour(colour);\n  };\n\n  const updateChromaColour = (colour: string) => {\n    setChromaColour(colour);\n  };\n\n  const updateTextColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextColour(event.target.value);\n  };\n\n  const updateBarColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setBarColour(event.target.value);\n  };\n\n  const updateChromaColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setChromaColour(event.target.value);\n  };\n\n  const addNewItem = () => {\n    const newIndex = graphItems.length;\n    updateItem(newIndex, { name: \"\", count: 0 });\n  };\n\n  const removeItem = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const inputId = event.currentTarget.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentItems = Array.from(graphItems);\n      const currentIndex = parseInt(inputIndexArray[0]);\n\n      if (currentItems[currentIndex]) {\n        currentItems.splice(currentIndex, 1);\n        setGraphItems(currentItems);\n      }\n    }\n  };\n\n  return (\n    <div className=\"chart\">\n      <div className=\"main-chart\" style={{backgroundColor: chromaColour, color: textColour}}>\n        <div className=\"graph-title\">\n          {graphTitle}\n        </div>\n        <div className=\"graph-area\" style={{\n          borderLeftColor: textColour,\n          borderLeftWidth: (showBorder ? \"2px\" : \"0px\"),\n          borderBottomColor: textColour,\n          borderBottomWidth: (showBorder ? \"2px\" : \"0px\")\n        }}>\n          {renderBars()}\n        </div>\n      </div>\n      <div className=\"chart-options\">\n        <div className=\"title-form\">\n          <div className=\"form-group\">\n            <TextField id=\"graph-title\" label=\"Chart Title\" variant=\"outlined\" value={graphTitle} onChange={(event) => updateTitle(event)} />\n          </div>\n          <div className=\"form-group\">\n            <FormGroup>\n              <FormControlLabel\n                control={<Switch checked={showBorder} onChange={() => setShowBorder(!showBorder)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Chart axis lines\" />\n            </FormGroup>\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-colour\" label=\"Bar colour\" variant=\"outlined\" value={barColour} onChange={updateBarColourFromText} />\n            <IconButton color=\"primary\" onClick={() => setBarColourPicker(!showBarColourPicker)}><Icon>{showBarColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            { showBarColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={barColour} onChange={ updateBarColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text/axis colour\" variant=\"outlined\" value={textColour} onChange={updateTextColourFromText} />\n            <IconButton color=\"primary\" onClick={() => setTextColourPicker(!showTextColourPicker)}><Icon>{showTextColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            { showTextColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textColour} onChange={ updateTextColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Chroma key colour\" variant=\"outlined\" value={chromaColour} onChange={updateChromaColourFromText} />\n            <IconButton color=\"primary\" onClick={() => setChromaColourPicker(!showChromaColourPicker)}><Icon>{showChromaColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            { showChromaColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={chromaColour} onChange={ updateChromaColour } />\n              </div> }\n          </div>\n        </div>\n        <div className=\"items-form\">\n          <h2>Chart Items <IconButton onClick={addNewItem}><Icon>add_circle</Icon></IconButton></h2>\n          {renderForm()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}