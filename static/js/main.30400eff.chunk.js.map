{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","blankItems","useState","graphItems","setGraphItems","graphTitle","setGraphTitle","chromaColour","setChromaColour","showChromaColourPicker","setChromaColourPicker","barColour","setBarColour","showBarColourPicker","setBarColourPicker","textColour","setTextColour","showTextColourPicker","setTextColourPicker","showBorder","setShowBorder","showTotalVotes","setShowTotalVotes","updateItem","index","item","slice","Object","assign","getTotalVotes","totalCount","forEach","graphItem","count","updateName","event","newValue","target","value","inputIndexArray","id","match","currentIndex","parseInt","name","updateValue","newValueNumber","Number","isNaN","addOneToValue","currentCount","subOneFromValue","undefined","newCount","removeItem","currentTarget","currentItems","Array","from","splice","className","style","backgroundColor","color","marginBottom","borderLeftColor","borderLeftWidth","borderBottomColor","borderBottomWidth","map","barWidth","maxWidth","renderBars","TextField","label","variant","onChange","updateTitle","FormGroup","FormControlLabel","control","Switch","checked","inputProps","Tooltip","title","IconButton","onClick","Icon","colour","newIndex","length","inputMode","pattern","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30400eff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { HexColorPicker } from \"react-colorful\";\nimport IconButton from '@mui/material/IconButton';\nimport Icon from '@mui/material/Icon';\nimport Tooltip from '@mui/material/Tooltip';\nimport TextField from '@mui/material/TextField';\nimport Switch from '@mui/material/Switch';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\ninterface IGraphItem {\n  name: string;\n  count: number;\n}\n\nexport default function Home() {\n  const blankItems: IGraphItem[] = [];\n\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphTitle, setGraphTitle] = useState(\"\");\n  const [chromaColour, setChromaColour] = useState(\"#00ff00\");\n  const [showChromaColourPicker, setChromaColourPicker] = useState(false);\n  const [barColour, setBarColour] = useState(\"#ff0000\");\n  const [showBarColourPicker, setBarColourPicker] = useState(false);\n  const [textColour, setTextColour] = useState(\"#000000\");\n  const [showTextColourPicker, setTextColourPicker] = useState(false);\n  const [showBorder, setShowBorder] = useState(false);\n  const [showTotalVotes, setShowTotalVotes] = useState(false);\n\n  const updateItem = (index: number, item: IGraphItem) => {\n    if (! graphItems[index]) {\n      setGraphItems([\n        ...graphItems,\n        Object.assign({}, graphItems[index], item),\n      ]);\n    } else {\n      setGraphItems([\n        ...graphItems.slice(0, index),\n        Object.assign({}, graphItems[index], item),\n        ...graphItems.slice(index + 1)\n      ]);\n    }\n  }\n\n  const getTotalVotes = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      if (graphItem) {\n        totalCount += graphItem.count || 0;\n      }\n    });\n\n    return totalCount;\n  };\n\n  const renderBars = () => {\n    const totalCount = getTotalVotes();\n\n    return graphItems.map((graphItem, index) => {\n      if (graphItem.name && graphItem.count) {\n        const barWidth = ((graphItem.count || 0) / totalCount) * 100 + \"%\";\n        return (\n          <div key={`graph-bar-${index}`} className=\"graph-item\">\n            <div className=\"graph-info\">\n              {graphItem.name ? graphItem.name : \"\"} <span className=\"graph-count\">{graphItem.count ? `(${graphItem.count})` : \"\"}</span>\n            </div>\n            <div className=\"graph-bar\" style={{maxWidth : barWidth, backgroundColor: barColour}}>\n              &emsp;\n            </div>\n          </div>\n        )\n      }\n\n      return \"\";\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div key={`graph-item-${index}`} className=\"form-item\">\n          <span className=\"graph-form-number\">{index + 1}</span>\n\n          <TextField id={`graph-item-${index}-name`} label=\"Name\" onChange={updateName} variant=\"outlined\"\n            value={graphItems[index].name} />\n          <TextField id={`graph-item-${index}-count`} inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n            label=\"Count\" onChange={updateValue} variant=\"outlined\" value={graphItems[index].count} />\n\n          <Tooltip title=\"Add one to count\">\n            <IconButton aria-label=\"Add one to count\" id={`graph-item-${index}-add`} onClick={() => addOneToValue(index)}>\n              <Icon>exposure_plus_1</Icon>\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Subtract one from count\">\n            <IconButton aria-label=\"Subtract one from count\" id={`graph-item-${index}-sub`} onClick={() => subOneFromValue(index)}>\n              <Icon>exposure_neg_1</Icon>\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Remove item\">\n            <IconButton aria-label=\"Remove item\" id={`graph-item-${index}-remove`} onClick={removeItem}>\n              <Icon>delete_forever</Icon>\n            </IconButton>\n          </Tooltip>\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: newValue, count: graphItems[currentIndex].count});\n    }\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,) => {\n    const newValue = event.target.value;\n    const newValueNumber = parseInt(newValue);\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: graphItems[currentIndex].name, count: (Number.isNaN(newValueNumber) ? 0 : newValueNumber)});\n    }\n  };\n\n  const addOneToValue = (index: number) => {\n    const currentCount = graphItems[index].count;\n    updateItem(index, {name: graphItems[index].name, count: currentCount + 1});\n  }\n\n  const subOneFromValue = (index: number) => {\n    if (graphItems[index] && graphItems[index].count !== undefined) {\n      const currentItem = graphItems[index];\n      let newCount = currentItem.count - 1;\n\n      // Prevent less than zero\n      if (newCount < 0) {\n        newCount = 0;\n      }\n\n      updateItem(index, {name: graphItems[index].name, count: newCount});\n    }\n  }\n\n  const updateTitle = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    setGraphTitle(newValue);\n  };\n\n  const updateTextColour = (colour: string) => {\n    setTextColour(colour);\n  };\n\n  const updateBarColour = (colour: string) => {\n    setBarColour(colour);\n  };\n\n  const updateChromaColour = (colour: string) => {\n    setChromaColour(colour);\n  };\n\n  const updateTextColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextColour(event.target.value);\n  };\n\n  const updateBarColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setBarColour(event.target.value);\n  };\n\n  const updateChromaColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setChromaColour(event.target.value);\n  };\n\n  const addNewItem = () => {\n    const newIndex = graphItems.length;\n    updateItem(newIndex, { name: \"\", count: 0 });\n  };\n\n  const removeItem = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const inputId = event.currentTarget.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentItems = Array.from(graphItems);\n      const currentIndex = parseInt(inputIndexArray[0]);\n\n      if (currentItems[currentIndex]) {\n        currentItems.splice(currentIndex, 1);\n        setGraphItems(currentItems);\n      }\n    }\n  };\n\n  const removeAllItems = () => {\n    setGraphItems(blankItems);\n  };\n\n  return (\n    <div className=\"chart\">\n      <div className=\"main-chart\" style={{backgroundColor: chromaColour, color: textColour}}>\n        <div style={{marginBottom: \"32px\"}}>\n          <div className=\"graph-title\">\n            {graphTitle}\n          </div>\n          { showTotalVotes && <div className=\"graph-subtitle\">\n            {getTotalVotes()} total votes\n          </div> }\n        </div>\n        <div className=\"graph-area\" style={{\n          borderLeftColor: textColour,\n          borderLeftWidth: (showBorder ? \"2px\" : \"0px\"),\n          borderBottomColor: textColour,\n          borderBottomWidth: (showBorder ? \"2px\" : \"0px\")\n        }}>\n          {renderBars()}\n        </div>\n      </div>\n      <div className=\"chart-options\">\n        <div className=\"title-form\">\n          <div className=\"form-group\">\n            <TextField id=\"graph-title\" label=\"Chart Title\" variant=\"outlined\" value={graphTitle} onChange={(event) => updateTitle(event)} />\n          </div>\n          <div className=\"form-group\">\n            <FormGroup>\n              <FormControlLabel\n                control={<Switch checked={showBorder} onChange={() => setShowBorder(!showBorder)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Chart axis lines\" />\n              <FormControlLabel\n                control={<Switch checked={showTotalVotes} onChange={() => setShowTotalVotes(!showTotalVotes)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Total votes\" />\n            </FormGroup>\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-colour\" label=\"Bar colour\" variant=\"outlined\" value={barColour} onChange={updateBarColourFromText} />\n            <Tooltip title=\"Toggle bar colour picker\">\n              <IconButton color=\"primary\" onClick={() => setBarColourPicker(!showBarColourPicker)}><Icon>{showBarColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showBarColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={barColour} onChange={ updateBarColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text/axis colour\" variant=\"outlined\" value={textColour} onChange={updateTextColourFromText} />\n            <Tooltip title=\"Toggle text colour picker\">\n              <IconButton color=\"primary\" onClick={() => setTextColourPicker(!showTextColourPicker)}><Icon>{showTextColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showTextColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textColour} onChange={ updateTextColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Chroma key colour\" variant=\"outlined\" value={chromaColour} onChange={updateChromaColourFromText} />\n            <Tooltip title=\"Toggle chroma key colour picker\">\n              <IconButton color=\"primary\" onClick={() => setChromaColourPicker(!showChromaColourPicker)}><Icon>{showChromaColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showChromaColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={chromaColour} onChange={ updateChromaColour } />\n              </div> }\n          </div>\n        </div>\n        <div className=\"items-form\">\n          <h2>\n            <span>Chart Items</span>\n            <Tooltip title=\"Add item\">\n              <IconButton onClick={addNewItem}><Icon>add_circle</Icon></IconButton>\n            </Tooltip>\n            <Tooltip title=\"Remove all items\">\n              <IconButton onClick={removeAllItems}><Icon>layers_clear</Icon></IconButton>\n            </Tooltip>\n          </h2>\n          {renderForm()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}