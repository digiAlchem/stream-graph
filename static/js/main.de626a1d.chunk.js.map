{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","blankItems","useState","graphItems","setGraphItems","graphTitle","setGraphTitle","chromaColour","setChromaColour","showChromaColourPicker","setChromaColourPicker","barColour","setBarColour","showBarColourPicker","setBarColourPicker","textColour","setTextColour","showTextColourPicker","setTextColourPicker","textOutlineColour","setTextOutlineColour","showTextOutlineColourPicker","setTextOutlineColourPicker","showOutline","setShowOutline","showBorder","setShowBorder","showTotalVotes","setShowTotalVotes","chartWidth","setChartWidth","showInfo","setShowInfo","updateItem","index","item","slice","Object","assign","getTotalVotes","totalCount","forEach","graphItem","count","getTextOutlineStyle","updateName","event","newValue","target","value","inputIndexArray","id","match","currentIndex","parseInt","name","updateValue","newValueNumber","Number","isNaN","addOneToValue","currentCount","subOneFromValue","undefined","newCount","chartWidthLabel","removeItem","currentTarget","currentItems","Array","from","splice","className","Modal","open","aria-labelledby","aria-describedby","onClose","style","marginTop","Icon","fontSize","backgroundColor","color","width","textShadow","borderLeftColor","borderLeftWidth","borderBottomColor","borderBottomWidth","map","barWidth","maxWidth","renderBars","TextField","label","variant","onChange","updateTitle","Tooltip","title","IconButton","onClick","FormGroup","FormControlLabel","control","Switch","checked","inputProps","Slider","aria-label","valueLabelFormat","getAriaValueText","valueLabelDisplay","labelPlacement","colour","newIndex","length","inputMode","pattern","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de626a1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { HexColorPicker } from \"react-colorful\";\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Modal from '@mui/material/Modal';\nimport Slider from '@mui/material/Slider';\nimport Switch from '@mui/material/Switch';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\n\ninterface IGraphItem {\n  name: string;\n  count: number;\n}\n\nexport default function Home() {\n  const blankItems: IGraphItem[] = [];\n\n  const [graphItems, setGraphItems] = useState(blankItems);\n  const [graphTitle, setGraphTitle] = useState(\"\");\n  const [chromaColour, setChromaColour] = useState(\"#00ff00\");\n  const [showChromaColourPicker, setChromaColourPicker] = useState(false);\n  const [barColour, setBarColour] = useState(\"#ff0000\");\n  const [showBarColourPicker, setBarColourPicker] = useState(false);\n  const [textColour, setTextColour] = useState(\"#000000\");\n  const [showTextColourPicker, setTextColourPicker] = useState(false);\n  const [textOutlineColour, setTextOutlineColour] = useState(\"#ffffff\");\n  const [showTextOutlineColourPicker, setTextOutlineColourPicker] = useState(false);\n  const [showOutline, setShowOutline] = useState(false);\n  const [showBorder, setShowBorder] = useState(false);\n  const [showTotalVotes, setShowTotalVotes] = useState(false);\n  const [chartWidth, setChartWidth] = useState(90);\n  const [showInfo, setShowInfo] = useState(false);\n\n  const updateItem = (index: number, item: IGraphItem) => {\n    if (! graphItems[index]) {\n      setGraphItems([\n        ...graphItems,\n        Object.assign({}, graphItems[index], item),\n      ]);\n    } else {\n      setGraphItems([\n        ...graphItems.slice(0, index),\n        Object.assign({}, graphItems[index], item),\n        ...graphItems.slice(index + 1)\n      ]);\n    }\n  }\n\n  const getTotalVotes = () => {\n    let totalCount = 0;\n    graphItems.forEach((graphItem) => {\n      if (graphItem) {\n        totalCount += graphItem.count || 0;\n      }\n    });\n\n    return totalCount;\n  };\n\n  const getTextOutlineStyle = () => {\n    return `\n      -1px -1px 0 ${textOutlineColour},\n      0 -1px 0 ${textOutlineColour},\n      1px -1px 0 ${textOutlineColour},\n      1px 0 0 ${textOutlineColour},\n      1px 1px 0 ${textOutlineColour},\n      0 1px 0 ${textOutlineColour},\n      -1px 1px 0 ${textOutlineColour},\n      -1px 0 0 ${textOutlineColour}\n    `;\n  };\n\n  const renderBars = () => {\n    const totalCount = getTotalVotes();\n\n    return graphItems.map((graphItem, index) => {\n      if (graphItem.name && graphItem.count >= 0) {\n        const barWidth = ((graphItem.count || 0) / totalCount) * 100 + \"%\";\n        return (\n          <div key={`graph-bar-${index}`} className=\"graph-item\">\n            <div className=\"graph-info\" style={showOutline ? {textShadow: getTextOutlineStyle()} : {}}>\n              {graphItem.name} <span className=\"graph-count\">({graphItem.count})</span>\n            </div>\n            <div className=\"graph-bar\" style={{maxWidth : barWidth, backgroundColor: barColour}}>\n              &emsp;\n            </div>\n          </div>\n        )\n      }\n\n      return \"\";\n    });\n  };\n\n  const renderForm = () => {\n    return graphItems.map((graphItem, index) => {\n      return (\n        <div key={`graph-item-${index}`} className=\"form-item\">\n          <span className=\"graph-form-number\">{index + 1}</span>\n\n          <TextField id={`graph-item-${index}-name`} label=\"Name\" onChange={updateName} variant=\"outlined\"\n            value={graphItems[index].name} />\n          <TextField id={`graph-item-${index}-count`} inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n            label=\"Count\" onChange={updateValue} variant=\"outlined\" value={graphItems[index].count} />\n\n          <Tooltip title=\"Add one to count\">\n            <IconButton aria-label=\"Add one to count\" id={`graph-item-${index}-add`} onClick={() => addOneToValue(index)}>\n              <Icon>exposure_plus_1</Icon>\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Subtract one from count\">\n            <IconButton aria-label=\"Subtract one from count\" id={`graph-item-${index}-sub`} onClick={() => subOneFromValue(index)}>\n              <Icon>exposure_neg_1</Icon>\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip title=\"Remove item\">\n            <IconButton aria-label=\"Remove item\" id={`graph-item-${index}-remove`} onClick={removeItem}>\n              <Icon>delete_forever</Icon>\n            </IconButton>\n          </Tooltip>\n        </div>\n      );\n    });\n  };\n\n  const updateName = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: newValue, count: graphItems[currentIndex].count});\n    }\n  };\n\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,) => {\n    const newValue = event.target.value;\n    const newValueNumber = parseInt(newValue);\n    const inputId = event.target.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentIndex = parseInt(inputIndexArray[0]);\n      updateItem(currentIndex, {name: graphItems[currentIndex].name, count: (Number.isNaN(newValueNumber) ? 0 : newValueNumber)});\n    }\n  };\n\n  const addOneToValue = (index: number) => {\n    const currentCount = graphItems[index].count;\n    updateItem(index, {name: graphItems[index].name, count: currentCount + 1});\n  }\n\n  const subOneFromValue = (index: number) => {\n    if (graphItems[index] && graphItems[index].count !== undefined) {\n      const currentItem = graphItems[index];\n      let newCount = currentItem.count - 1;\n\n      // Prevent less than zero\n      if (newCount < 0) {\n        newCount = 0;\n      }\n\n      updateItem(index, {name: graphItems[index].name, count: newCount});\n    }\n  }\n\n  const updateChartWidth = (event: Event, newValue: number | number[]) => {\n    if (typeof newValue === 'number') {\n      setChartWidth(newValue);\n    }\n  }\n\n  const chartWidthLabel = (value: number) => {\n    return `${value}%`;\n  }\n\n  const updateTitle = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const newValue = event.target.value;\n    setGraphTitle(newValue);\n  };\n\n  const updateTextColour = (colour: string) => {\n    setTextColour(colour);\n  };\n\n  const updateTextOutlineColour = (colour: string) => {\n    setTextOutlineColour(colour);\n  };\n\n  const updateBarColour = (colour: string) => {\n    setBarColour(colour);\n  };\n\n  const updateChromaColour = (colour: string) => {\n    setChromaColour(colour);\n  };\n\n  const updateTextColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextColour(event.target.value);\n  };\n\n  const updateTextOutlineColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTextOutlineColour(event.target.value);\n  };\n\n  const updateBarColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setBarColour(event.target.value);\n  };\n\n  const updateChromaColourFromText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setChromaColour(event.target.value);\n  };\n\n  const addNewItem = () => {\n    const newIndex = graphItems.length;\n    updateItem(newIndex, { name: \"\", count: 0 });\n  };\n\n  const removeItem = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const inputId = event.currentTarget.id;\n    const inputIndexArray = (inputId.match(/[\\d]+/g));\n\n    if (inputIndexArray) {\n      const currentItems = Array.from(graphItems);\n      const currentIndex = parseInt(inputIndexArray[0]);\n\n      if (currentItems[currentIndex]) {\n        currentItems.splice(currentIndex, 1);\n        setGraphItems(currentItems);\n      }\n    }\n  };\n\n  const removeAllItems = () => {\n    setGraphItems(blankItems);\n  };\n\n  return (\n    <div className=\"chart\">\n      <Modal open={showInfo} aria-labelledby=\"modal-info\" aria-describedby=\"modal-modal-description\" onClose={() => setShowInfo(!showInfo)}>\n        <div className=\"modal-box\">\n          <h3 style={{marginTop: 8}}>How to add as a stream overlay</h3>\n          <ul>\n            <li>\n              Add a Window Capture of this browser window\n            </li>\n            <li>\n              Crop the capture down to the chart area\n            </li>\n            <li>\n              Use a chroma/colour key to make the chart background transparent\n            </li>\n          </ul>\n          <h3 style={{marginTop: 8}}>How to use the chart builder</h3>\n          <ul>\n            <li>\n              Click <Icon fontSize=\"small\">add_circle</Icon> to add a new item to the chart\n            </li>\n            <li>\n              Bars will only show on the chart if they have a name and a count\n            </li>\n            <li>\n              Bars will update in realtime when names and counts are changed\n            </li>\n            <li>\n              To remove an item from the chart, you can either blank out the item's name or click the <Icon fontSize=\"small\">delete_forever</Icon> next to the item\n            </li>\n            <li>\n              To clear the chart, click <Icon fontSize=\"small\">layers_clear</Icon> at the top of the items list\n            </li>\n          </ul>\n        </div>\n      </Modal>\n      <div className=\"main-chart\" style={{backgroundColor: chromaColour, color: textColour, width: chartWidth + \"%\"}}>\n        <div className=\"graph-title-area\" style={showOutline ? {textShadow: getTextOutlineStyle()} : {}}>\n          <div className=\"graph-title\">\n            {graphTitle}\n          </div>\n          { showTotalVotes && <div className=\"graph-subtitle\">\n            {getTotalVotes()} total votes\n          </div> }\n        </div>\n        <div className=\"graph-area\" style={{\n          borderLeftColor: textColour,\n          borderLeftWidth: (showBorder ? \"2px\" : \"0px\"),\n          borderBottomColor: textColour,\n          borderBottomWidth: (showBorder ? \"2px\" : \"0px\")\n        }}>\n          {renderBars()}\n        </div>\n      </div>\n      <div className=\"chart-options\">\n        <div className=\"title-form\">\n          <div className=\"form-group\">\n            <TextField id=\"graph-title\" label=\"Chart Title\" variant=\"outlined\" value={graphTitle} onChange={(event) => updateTitle(event)} />\n            <Tooltip title=\"How to use\">\n              <IconButton color=\"primary\" onClick={() => setShowInfo(!showInfo)}><Icon>info</Icon></IconButton>\n            </Tooltip>\n          </div>\n          <div className=\"form-group\">\n            <FormGroup>\n              <FormControlLabel\n                control={<Switch checked={showBorder} onChange={() => setShowBorder(!showBorder)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Chart axis lines\" />\n              <FormControlLabel\n                control={<Switch checked={showOutline} onChange={() => setShowOutline(!showOutline)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Outline on text\" />\n              <FormControlLabel\n                control={<Switch checked={showTotalVotes} onChange={() => setShowTotalVotes(!showTotalVotes)} inputProps={{ 'aria-label': 'controlled' }} />}\n                label=\"Total votes\" />\n              <FormControlLabel\n                className=\"slider-label\"\n                control={<Slider value={chartWidth} aria-label=\"Chart width\" valueLabelFormat={chartWidthLabel} getAriaValueText={chartWidthLabel} valueLabelDisplay=\"auto\" onChange={updateChartWidth} />}\n                label=\"Chart width\"\n                labelPlacement=\"top\" />\n            </FormGroup>\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-colour\" label=\"Bar colour\" variant=\"outlined\" value={barColour} onChange={updateBarColourFromText} />\n            <Tooltip title=\"Toggle bar colour picker\">\n              <IconButton color=\"primary\" onClick={() => setBarColourPicker(!showBarColourPicker)}><Icon>{showBarColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showBarColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={barColour} onChange={ updateBarColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text/axis colour\" variant=\"outlined\" value={textColour} onChange={updateTextColourFromText} />\n            <Tooltip title=\"Toggle text colour picker\">\n              <IconButton color=\"primary\" onClick={() => setTextColourPicker(!showTextColourPicker)}><Icon>{showTextColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showTextColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textColour} onChange={ updateTextColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Text outline colour\" variant=\"outlined\" value={textOutlineColour} onChange={updateTextOutlineColourFromText} />\n            <Tooltip title=\"Toggle text outline colour picker\">\n              <IconButton color=\"primary\" onClick={() => setTextOutlineColourPicker(!showTextOutlineColourPicker)}><Icon>{showTextOutlineColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showTextOutlineColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={textOutlineColour} onChange={ updateTextOutlineColour } />\n              </div> }\n          </div>\n          <div className=\"form-group\">\n            <TextField id=\"graph-text\" label=\"Chroma key colour\" variant=\"outlined\" value={chromaColour} onChange={updateChromaColourFromText} />\n            <Tooltip title=\"Toggle chroma key colour picker\">\n              <IconButton color=\"primary\" onClick={() => setChromaColourPicker(!showChromaColourPicker)}><Icon>{showChromaColourPicker ? \"cancel\" : \"palette\"}</Icon></IconButton>\n            </Tooltip>\n            { showChromaColourPicker && <div className=\"colour-picker\">\n              <HexColorPicker className=\"picker\" color={chromaColour} onChange={ updateChromaColour } />\n              </div> }\n          </div>\n        </div>\n        <div className=\"items-form\">\n          <h2>\n            <span>Chart Items</span>\n            <Tooltip title=\"Add item\">\n              <IconButton onClick={addNewItem}><Icon>add_circle</Icon></IconButton>\n            </Tooltip>\n            <Tooltip title=\"Remove all items\">\n              <IconButton onClick={removeAllItems}><Icon>layers_clear</Icon></IconButton>\n            </Tooltip>\n          </h2>\n          {renderForm()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}